-- Create a table to store user interactions
CREATE TABLE IF NOT EXISTS user_interactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    question_id BIGINT REFERENCES questions(id) ON DELETE CASCADE,
    interaction_type TEXT NOT NULL CHECK (interaction_type IN ('view', 'like', 'answer', 'bookmark')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    tags TEXT[] -- Tags associated with the interacted content
);

-- Create an index for faster queries
CREATE INDEX IF NOT EXISTS idx_user_interactions_user_id ON user_interactions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_interactions_question_id ON user_interactions(question_id);

-- Create a function to update user interests based on interactions
CREATE OR REPLACE FUNCTION update_user_interests()
RETURNS TRIGGER AS $$
BEGIN
    -- Update user interests in the profiles table
    -- This will be used for recommendations
    WITH tag_counts AS (
        SELECT 
            unnest(tags) as tag,
            COUNT(*) as weight
        FROM user_interactions
        WHERE user_id = NEW.user_id
        GROUP BY tag
    )
    UPDATE profiles
    SET 
        interests = (
            SELECT json_object_agg(tag, weight)
            FROM tag_counts
        )
    WHERE id = NEW.user_id;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically update user interests
CREATE TRIGGER trigger_update_user_interests
AFTER INSERT OR UPDATE ON user_interactions
FOR EACH ROW
EXECUTE FUNCTION update_user_interests();

-- Add interests column to profiles if it doesn't exist
ALTER TABLE profiles ADD COLUMN IF NOT EXISTS interests JSONB DEFAULT '{}'::jsonb;
